@page "/login2"


@using ProductCard.Data;
@using ProductCard.Models;
@using ProductCard.Helpers;
@inject IJSRuntime JsRuntime;
@inject UserService userService;
@inject TokenHelper tokenHelper;
@inject NavigationManager navManager;

<div class="text-center m-5">
    <h3 style="color:rgba(131,58,180,1);">Please Login to proceed...</h3>
</div>


<div class="d-flex justify-content-center">
    <EditForm Model="@User" OnValidSubmit="LoginUser" OnInvalidSubmit="LoginUser">
        <DataAnnotationsValidator />

        <div class="form-group">
            <InputText @bind-Value="@User.Email" placeholder="Email" class="form-control  m-5" style="width:650px;" />
            <ValidationMessage For="(() => User.Email )" />
        </div>

        <div class="form-group">
            <InputText @bind-Value="@User.Password" placeholder="Password" type="password" class="form-control  m-5" style="width:650px;" />
            <ValidationMessage For="(() => User.Password )" />
        </div>

        <button type="submit" class="btn btn-lg  m-5" style="background-color:rgba(131,58,180,1); color:white">Login</button>


    </EditForm>
</div>



@code {
    public UserViewModel User { get; set; } = new UserViewModel();

    protected override void OnInitialized() => User ??= new();


    private async Task LoginUser(EditContext editContext)
    {
        var userViewModel = editContext.Model as UserViewModel;

        var user = userService.GetUserByEmail(userViewModel.Email);

        var verifyPassword = PasswordHelper.VerifyPassword(userViewModel.Password, user.Password);

        if (user != null && verifyPassword)
        {
            var token = tokenHelper.GenerateToken(user.UserId, user.UserName, user.Role);

            var userWithToken = new UserViewModel
                {
                    UserId = user.UserId,
                    Email = user.Email,
                    Password = user.Password,
                    Role = user.Role,
                    Token = token,
                };

            navManager.NavigateTo("./productlist");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Wrong Credentials"); // Alert
        }

    }
}

