@using ProductCard.Data;
@inject ProductService productService;
@inject NavigationManager navManager;

<td  >
    @Product.ProductName
</td>
<td>
    @Product.Price
</td>
<td > 
    <img style="width:150px; height:150px" src="@Product.Image"/>
 
</td>
<td>
    <button class="btn btn-lg" style="background-color:rgba(131,58,180,1); color:white" @onclick="Edit">Edit</button>
</td>
<td>
    <button class="btn btn-lg" style="background-color:rgba(131,58,180,1); color:white" @onclick="ShowDeleteConfirmation">Delete</button>
    @if (isDeleteConfirmationVisible)
    {
        <DeleteConfirmation OnConfirmed="(confirmed) => ConfirmDeleteHandler(confirmed)" @ref="confirmationModal"></DeleteConfirmation>
    }
</td>
<hr style="color:rgba(217,108,233,1)" />




@code {
    [Parameter]
    public Product Product { get; set; }

    [Parameter]
    public EventCallback<string> DeleteProduct { get; set; }

    private bool isDeleteConfirmationVisible = false;
    private DeleteConfirmation confirmationModal;

    private void ShowDeleteConfirmation()
    {
        isDeleteConfirmationVisible = true;
    }

    private async Task ConfirmDeleteHandler(bool confirmed)
    {
        if (confirmed)
        {
            DeleteProduct.InvokeAsync(Product.ProductId);
        }

        isDeleteConfirmationVisible = false;
        confirmationModal.Hide();

        navManager.NavigateTo($"./productlist");
    }

    public void Edit()
    {
        navManager.NavigateTo($"./update-product/{Product.ProductId}");
    }
}
